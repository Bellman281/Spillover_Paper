# -*- coding: utf-8 -*-
"""WTI_OIL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oDcwPDOQsUi2uqn-0PrqAXe5nizaCZRo
"""

from google.colab import drive
drive.mount('/content/drive/')
#lines=tf.data.TextLineDataset('/content/drive/My Drive/essays.csv')a

'''
Oil Index	CI005001.CI
Coal Index	CI005002.CI
Non Ferrous Metals Index	CI005003.CI
Iron Index	CI005005.CI
'''

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

filename='WTI.xls'
start_date='31-12-2004'
end_date='17-08-2014'
stock_list =['Oil','Coal','Nonferrous Metal','Iron']
source_stock='source_china.csv'
stock_list_ticker=['Trading_Date','CI005001','CI005002','CI005003','CI005005']

df_wti= pd.read_excel('/content/drive/My Drive/'+filename)

df_China_source=pd.read_csv('/content/drive/My Drive/'+source_stock)
df_China_source['Trading_Date'] = pd.to_datetime(df_China_source['date'])

df_China_source
#list(df_China_source.columns)

df_China_source2 = df_China_source.loc[:,stock_list_ticker]

df_wti

df_wti['Trading_Date'] = pd.to_datetime(df_wti['Date'])
mask = (df_wti['Trading_Date'] > start_date) & (df_wti['Trading_Date'] <= end_date)
df_wti = df_wti.loc[mask]
df_wti

df_cd = pd.merge(df_wti, df_China_source2, how='inner', on = 'Trading_Date')

df_cd



df_cd.to_excel('/content/drive/My Drive/aligned.xlsx')

df_USDCNY= pd.read_csv('/content/drive/My Drive/USD_CNY_Data.csv')
df_USDCNY

df_USDCNY['Trading_Date'] = pd.to_datetime(df_USDCNY['Date'])
mask = (df_USDCNY['Trading_Date'] > start_date) & (df_USDCNY['Trading_Date'] <= end_date)
df_USDCNY2 = df_USDCNY.loc[mask]
df_USDCNY2 =df_USDCNY2.loc[:,['Trading_Date','Price']]
df_USDCNY2

df_USDCNY2= df_USDCNY2.sort_values('Trading_Date')

df_cd2 = pd.merge(df_cd, df_USDCNY2, how='inner', on = 'Trading_Date')
df_cd2

df_cd2['WTI_Rmb'] =df_cd2.WTI_Spot_Price*df_cd2.Price

df = df_cd2.loc[:,['Trading_Date','WTI_Rmb','CI005001','CI005002','CI005003','CI005005']]
df.head()

len([1] +list(np.diff(np.log(df.WTI_Rmb))))

df['Ret_WTI_Rmb']=[0] +list(np.diff(np.log(df.WTI_Rmb)))
df['Ret_CI005001']=[0] +list(np.diff(np.log(df.CI005001)))
df['Ret_CI005002']=[0] +list(np.diff(np.log(df.CI005002)))
df['Ret_CI005003']=[0] +list(np.diff(np.log(df.CI005003)))
df['Ret_CI005005']=[0] +list(np.diff(np.log(df.CI005005)))

df

df.info()
df.set_index('Trading_Date', inplace=True)
df.info()

df.head()

#df2 =  pd.DataFrame(df,index=df['Trading_Date'])

#df2

#df.WTI_Rmb.plot(x_compat=True)
#plt.title('WTI OIL Prices in RMB')


#plt.xticks(rotation=70)


fig, ax = plt.subplots(figsize=(10, 10))

ax.plot(df.index.values,
       df.WTI_Rmb,
       color='red')


ax.set(xlabel="Date",
       title="WTI OIL Prices in RMB")

#Saving the graph into a JPG file
plt.savefig('/content/drive/My Drive/WTI.png', bbox_inches='tight')

'''
Oil Index	CI005001.CI
Coal Index	CI005002.CI
Non Ferrous Metals Index	CI005003.CI
Iron Index	CI005005.CI

Dates : 
from:    31 Dec 2004 
to:      17 Oct 2014
'''

df.to_excel('/content/drive/My Drive/stock_returns.xlsx')

df.dropna()

returns_list=['Ret_WTI_Rmb','Ret_CI005001',	'Ret_CI005002',	'Ret_CI005003','Ret_CI005005']	
df_returns =df.loc[:,returns_list]
df_returns =df_returns.iloc[1:]

from scipy import stats
import statsmodels.stats as st 
import statsmodels.api as sm

jarque_test= df_returns.apply(lambda x: stats.jarque_bera(x)[0])
jarque_test_p_value= df_returns.apply(lambda x: stats.jarque_bera(x)[1])
jarque_test_p_value

def box_j(x):
    res = sm.tsa.ARMA(x, (1,1)).fit(disp=-1)
    
    return sm.stats.acorr_ljungbox(res.resid, lags=[20]) [0][0]
def box_j_p_vale(x):
    res = sm.tsa.ARMA(x, (1,1)).fit(disp=-1)
    
    return sm.stats.acorr_ljungbox(res.resid, lags=[20]) [1][0]

box_j_test= df_returns.apply(box_j)
box_j_test_p_value= df_returns.apply(box_j_p_vale)

x= df_returns['Ret_CI005001']
arma = sm.tsa.ARMA(x, (1,1)).fit(disp=-1)
whiteheter = st.diagnostic.het_white(arma.resid.values,sm.add_constant(arma.model.exog))
whiteheter

arma.params

df2 = pd.DataFrame(zip(list(df_returns.columns),df_returns.mean(),df_returns.std(),df_returns.skew(),df_returns.kurtosis(),jarque_test,jarque_test_p_value,box_j_test,box_j_test_p_value),
                   columns=['Stocks','Mean','Std','Skewdness','kurtosis','jarque_test','jarque_test_p_value','box_j_test','box_j_test_p_value'] )

df2.head ()

list(df_returns.columns)

df_returns.corr()

df2.to_excel('/content/drive/My Drive/descriptive.xlsx')

pd.DataFrame(df_returns.corr()).to_excel('/content/drive/My Drive/cor.xlsx')

